// String Replace
// From gist: https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
	@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Font Face
// From gist: https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
	eot: "?",
	svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
	otf: "opentype",
	ttf: "truetype"
    );

    @each $ext in $exts {
	$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
	$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
	$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
	font-family: quote($name);
	font-style: $style;
	font-weight: $weight;
	src: $src;
    }
}

// border-radius
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin border-top-radius($radius) {
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
}
@mixin border-right-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    background-clip: padding-box;
}
@mixin border-left-radius($radius) {
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
}

// linear-graident
// credit to: http://www.sitepoint.com/building-linear-gradient-mixin-sass/
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
	$color-stops: $direction, $color-stops;
	$direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

// helper for linear-gradient
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
    
    @return $is-keyword or $is-angle;
}

// helper for linear-gradient
@function legacy-direction($value) {
    @if is-direction($value) == false {
	@error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }
    
    $conversion-map: (
	to top          : bottom,
	to top right    : bottom left,
	to right top    : left bottom,
	to right        : left,
	to bottom right : top left,
	to right bottom : left top,
	to bottom       : top,
	to bottom left  : top right,
	to left bottom  : right top,
	to left         : right,
	to left top     : right bottom,
	to top left     : bottom right
    );
    
    @if map-has-key($conversion-map, $value) {
	@return map-get($conversion-map, $value);
    }
    
    @return 90deg - $value;
}

// Helpful media mixin
// credit to: https://gist.github.com/anthonyshort/2028061

/* Media */
$mq-mobile-portrait	: 320px !default;
$mq-mobile-landscape	: 480px !default;
$mq-tablet-portrait	: 768px !default;
$mq-tablet-landscape	: 1024px !default;
$mq-desktop		: 1382px !default;

// Both portrait and landscape
@mixin mobile-only {
    @media (max-width : $mq-mobile-landscape) {
	@content;
    }
}

// Everything up to and including the portrait width of the phone
// Since it's the smallest query it doesn't need a min
@mixin mobile-portrait-only {
    @media (max-width : $mq-mobile-portrait) {
	@content;
    }
}

// Everything up to and including the mobile portrait
@mixin mobile-portrait-and-below {
    @media (max-width : $mq-mobile-portrait) {
	@content;
    }
}

// Everything above and including the mobile portrait
@mixin mobile-portrait-and-up {
    @media (min-width : $mq-mobile-portrait) {
	@content;
    }
}

// Everthing larger than a portrait mobile up until mobile landscape
@mixin mobile-landscape-only {
    @media only screen and (min-width : $mq-mobile-portrait + 1) and (max-width : $mq-mobile-landscape) {
	@content;
    }
}

// Everything up to and including the mobile landscape width
@mixin mobile-landscape-and-below {
    @media only screen and (max-width : $mq-mobile-landscape) {
	@content;
    }
}

// Everything above and including the mobile landscape width
@mixin mobile-landscape-and-up {
    @media only screen and (min-width : $mq-mobile-portrait + 1) {
	@content;
    }
}

// Both the portrait and landscape width of the tablet
// Larger than a landscape mobile but less than or equal to a landscape tablet
@mixin tablet-only {
    @media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-landscape) {
	@content;
    }
}

// Everything larger than mobile landscape up until the portrait width of the tablet
@mixin tablet-portrait-only {
    @media only screen and (min-width : $mq-mobile-landscape + 1) and (max-width : $mq-tablet-portrait) {
	@content;
    }
}

// Everything below and including the portrait width of the tablet
@mixin tablet-portrait-and-below {
    @media only screen and (max-width : $mq-tablet-portrait) {
	@content;
    }
}

// Everything above and including the portrait width of the tablet
@mixin tablet-portrait-and-up {
    @media only screen and (min-width : $mq-mobile-landscape + 1) {
	@content;
    }
}

// Larger than portrait but less than or equal to the landscape width
@mixin tablet-landscape-only {
    @media only screen and (min-width : $mq-tablet-portrait + 1) and (max-width : $mq-tablet-landscape) {
	@content;
    }
}

// Up to and including the tablet landscape
@mixin tablet-landscape-and-below {
    @media only screen and (max-width : $mq-tablet-landscape) {
	@content;
    }
}

// Everything larger than portrait tablet
@mixin tablet-landscape-and-up {
    @media only screen and (min-width : $mq-tablet-portrait + 1) {
	@content;
    }
}

// Everything larger than a landscape tablet
@mixin desktop-and-up {
    @media only screen and (min-width : $mq-tablet-landscape + 1) {
	@content;
    }
}

// Everything below and including the desktop 
@mixin desktop-and-below {
    @media only screen and (max-width : $mq-desktop) {
	@content;
    }
}

// Everything larger than a landscape tablet but less than or equal to the desktop
@mixin desktop-only {
    @media only screen and (min-width : $mq-tablet-landscape + 1) and (max-width : $mq-desktop) {
	@content;
    }
}

// Retina screens have a 1.5 pixel ratio, not 2
@mixin retina {
    @media only screen and (-webkit-min-device-pixel-ratio : 1.5), only screen and (min-device-pixel-ratio : 1.5) {
	@content;
    }
}

// box-shadow
@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
    -webkit-box-shadow:$top $left $blur $color #{$inset};
    -moz-box-shadow:$top $left $blur $color #{$inset};
    box-shadow:$top $left $blur $color #{$inset};
}

// transform
@mixin perspective($depth) {
    perspective: $depth;
    -webkit-perspective: $depth;
    -moz-perspective: $depth;
}

@mixin transform($xDeg, $yDeg, $style:flat, $backface-visibility:visible) {
    $rotation: null;
    @if ($xDeg) {
	@if ($rotation) {
	    $rotation: $rotation + rotateX($xDeg);
	} @else {
	    $rotation: rotateX($xDeg);
	}
    }
    @if ($yDeg) {
	@if ($rotation) {
	    $rotation: $rotation + rotateY($yDeg);
	} @else {
	    $rotation: rotateY($yDeg);
	}
    }
    @if (not $rotation) {
	$rotation:none;
    }
    transition: $rotation;
    transform-style: $style;
    backface-visibility: $backface-visibility;
    -webkit-transform: $rotation;
    -webkit-transform-style: $style;
    -webkit-backface-visibility: $backface-visibility;
    -moz-transform: $rotation;
    -moz-transform-style: $style;
    -moz-backface-visibility: $backface-visibility;
}

@mixin transition($which, $elapse, $speed-option) {
    -o-transition: $which $elapse $speed-option;
    -ms-transition: $which $elapse $speed-option;
    -moz-transition: $which $elapse $speed-option;
    -webkit-transition: $which $elapse $speed-option;
    transition: $which $elapse $speed-option;

}

// content-wrapper
@mixin content-wrapper($usualWidth, $mobileWidth, $margin:auto) {
    width: $usualWidth;
    height: 100%;
    margin: $margin;

    @include tablet-landscape-and-below {
	width: $mobileWidth;
    }
}

// bg size
@mixin background-size($size) {
    -webkit-background-size: $size;
    -moz-background-size: $size;
    -o-background-size: $size;
    background-size: $size;
}